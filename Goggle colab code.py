# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Si1umc_yz8HwbJ4DEDUHEAwJ-SHiq_aP
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import joblib
import numpy as np

df = pd.read_csv('premier-player-23-24.csv')

df

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

print(df['Nation'].unique())

# Extract the last part of the 'Nation' column (e.g., "ESP" from "es ESP")
df['Country_Code'] = df['Nation'].str.split().str[-1]

# Mapping dictionary for country abbreviations
country_mapping = {
    "ESP": "Spain", "ENG": "England", "BRA": "Brazil", "ARG": "Argentina",
    "POR": "Portugal", "NOR": "Norway", "SUI": "Switzerland", "CRO": "Croatia",
    "NED": "Netherlands", "BEL": "Belgium", "GER": "Germany", "COL": "Colombia",
    "EGY": "Egypt", "HUN": "Hungary", "URU": "Uruguay", "JPN": "Japan",
    "SCO": "Scotland", "FRA": "France", "IRL": "Ireland", "NIR": "Northern Ireland",
    "CMR": "Cameroon", "GRE": "Greece", "WAL": "Wales", "UKR": "Ukraine",
    "POL": "Poland", "ITA": "Italy", "GHA": "Ghana", "ECU": "Ecuador",
    "SEN": "Senegal", "SRB": "Serbia", "ALB": "Albania", "SWE": "Sweden",
    "PAR": "Paraguay", "SVK": "Slovakia", "KOR": "South Korea", "MLI": "Mali",
    "DEN": "Denmark", "ROU": "Romania", "ISR": "Israel", "MAR": "Morocco",
    "CIV": "Ivory Coast", "TUN": "Tunisia", "JAM": "Jamaica", "BFA": "Burkina Faso",
    "CZE": "Czech Republic", "MEX": "Mexico", "ALG": "Algeria", "USA": "United States",
    "NGA": "Nigeria", "GNB": "Guinea-Bissau", "TUR": "Turkey", "GAB": "Gabon",
    "AUT": "Austria", "ZIM": "Zimbabwe", "COD": "Congo DR", "IRN": "Iran",
    "GRN": "Grenada", "NZL": "New Zealand", "CRC": "Costa Rica", "RSA": "South Africa",
    "TOG": "Togo", "ISL": "Iceland", "KVX": "Kosovo", "ANG": "Angola",
    "BIH": "Bosnia and Herzegovina", "CHI": "Chile",
}

# Map the codes to full country names
df['Country'] = df['Country_Code'].map(country_mapping)

# Drop the old 'Nation' and 'Country_Code' columns
df = df.drop(columns=['Nation', 'Country_Code'])

# Reorder columns to place 'Country' next to 'Player'
columns = list(df.columns)
player_index = columns.index('Player')
columns.insert(player_index + 1, 'Country')
df = df[columns]

print(df.head())

# Remove players who played 10 matches or fewer OR started less than 10 matches
df = df[(df['MP'] > 10) & (df['Starts'] >= 10)]


df

df = df.loc[:, ~df.columns.duplicated()]


print(df.head())

df

# Rename specific columns
df = df.rename(columns={
    'Pos': 'Position',
    'Min': 'Minutes Played',
    'MP': 'Matches Played',
    '90s': '90s Played',
    'Ast': 'Assists',
    'Gls': 'Goals'
})


print(df.head())

columns_to_convert = ['Age', 'Starts', 'Goals', 'Assists', 'Matches Played', '90s Played']
df[columns_to_convert] = df[columns_to_convert].astype(int)


print(df.info())

df

player_overview_path = 'player_overview.xlsx'
player_overview_data = pd.read_excel(player_overview_path, sheet_name='Sheet1')


print("Player overview data (first 5 rows):")
print(player_overview_data.head())

# Extract relevant columns
player_heights = player_overview_data[['Name', 'Height']].rename(columns={'Name': 'Player'})
print("\nExtracted height data:")
print(player_heights.head())

# Merge height data with the existing DataFrame
df = df.merge(player_heights, on='Player', how='left')

# Inspect the dataset after merging
print("\nDataset after merging height data (first 5 rows):")
print(df.head())

# Optional: Clean the Height column (e.g., remove 'cm' and convert to numeric)
df['Height'] = df['Height'].str.replace('cm', '').astype(float)
print("\nHeight column after cleaning (first 5 rows):")
print(df[['Player', 'Height']].head())

# Save the updated DataFrame
output_path = 'updated_premier_player_23_24_with_height.csv'
df.to_csv(output_path, index=False)

print(f"\nUpdated dataset saved to: {output_path}")

df

# Display only the 'Player' and 'Height' columns for all players in the dataset
df[['Player', 'Height']]

# Remove duplicate players based on the 'Player' column
df= df.drop_duplicates(subset=['Player'])

# Display the updated dataset
df[['Player', 'Height']]

# Set pandas display options to show all rows
pd.set_option('display.max_rows', None)

# Filter rows where 'Height' is NaN
df_with_missing_height = df[df['Height'].isna()]

# Select 'Player', 'Height', and 'Minutes Played' columns
df_filtered = df_with_missing_height[['Player', 'Height', 'Minutes Played']]

# Sort by 'Minutes Played' in descending order
df_sorted = df_filtered.sort_values(by='Minutes Played', ascending=False)

# Display the sorted DataFrame
print(df_sorted)

# Optionally reset to default display settings
pd.reset_option('display.max_rows')

updated_heights = {
    "Jordan Pickford": 185,
    "André Onana": 190,
    "Max Kilman": 193,
    "Dominic Solanke": 187,
    "Emerson Palmieri": 176,
    "Ezri Konsa": 183,
    "James Ward-Prowse": 173,
    "Son Heung-min": 183,
    "Anthony Gordon": 173,
    "Jack Robinson": 180,
    "Tomáš Souček": 192,
    "Lewis Dunk": 192,
    "Nicolas Jackson": 186
}

# Update the 'Height' column in the DataFrame
for player, height in updated_heights.items():
    df.loc[df['Player'] == player, 'Height'] = height

# Verify the updates
print(df[['Player', 'Height']].head())

updated_heights = {
    "Lewis Cook": 175,
    "Kyle Walker": 183,
    "Dan Burn": 198,
    "Anel Ahmedhodžić": 192,
    "Abdoulaye Doucouré": 184,
    "Alisson": 193,
    "Vitaliy Mykolenko": 175,
    "Edson Álvarez": 187,
    "Charlie Taylor": 176,
    "Joško Gvardiol": 185,
    "Ashley Young": 175,
    "Kieran Trippier": 173,
    "Jack Harrison": 175,
    "Alex Iwobi": 180,
    "Dominic Calvert-Lewin": 187,
    "Adam Smith": 180,
    "James Maddison": 175,
    "Hwang Hee-chan": 177,
    "Chris Richards": 188,
    "Brennan Johnson": 183,
    "Pape Matar Sarr": 185,
    "Đorđe Petrović": 194,
    "Joel Ward": 188,
    "Scott McTominay": 193,
    "Will Hughes": 185,
    "Idrissa Gana Gueye": 174,
    "James Mcatee": 175,
    "Chris Wood": 191,
    "Sam Johnstone": 193,
    "Andrew Robertson": 178,
    "Danny Welbeck": 185,
    "Igor": 185,
    "Neco Williams": 183,
    "Harry Wilson": 173,
    "Jeremy Doku": 171,
    "Mateo Kovačić": 176,
    "Jason Steele": 188,
    "Tom Cairney": 185,
    "Moussa Niakhate": 190,
    "Willy Boly": 195,
    "Bobby Reid": 170,
    "Philip Billing": 193,
    "Jonny Evans": 188,
    "Jeffrey Schlupp": 178,
    "Nick Pope": 198,
    "Valentino Livramento": 181,
    "Jordan Clark": 178,
    "Ben Mee": 180,
    "Andros Townsend": 176,
    "Jóhann Berg Guðmundsson": 178,
    "Jacob Murphy": 173,
    "Adam Webster": 191,
    "Saša Lukić": 182,
    "Ben Davies": 181,
    "Mathias Jørgensen": 191,
    "Jamaal Lascelles": 188,
    "John Stones": 188,
    "Ameen Al-Dakhil": 185,
    "Jack Grealish": 180,
    "Luke Shaw": 185,
    "Andre Brooks": 178,
    "Luke Thomas": 180,
    "Serge Aurier": 176,
    "James Milner": 175
}

# Update the 'Height' column in the DataFrame
for player, height in updated_heights.items():
    df.loc[df['Player'] == player, 'Height'] = height

# Verify the updates
print(df[['Player', 'Height']].head())

# Get unique values from the 'Position' column
unique_positions = df['Position'].unique()

# Display the unique positions
print(unique_positions)

# Get the unique values from the 'Position' column
unique_positions = df['Position'].unique()

# Create a mapping with unique numbers appended
unique_positions_mapping = {value: f"{value}_{i+1}" for i, value in enumerate(unique_positions)}

# Apply the mapping to the 'Position' column
df['Position'] = df['Position'].map(unique_positions_mapping)

# Reverse the mapping or apply the intended mapping
final_mapping = {
    'MF_1': 'Midfielder',
    'FW,MF_2': 'Forward',
    'GK_3': 'Goalkeeper',
    'MF,FW_4': 'Forward',
    'DF_5': 'Defender',
    'FW_6': 'Forward',
    'DF,MF_7': 'Defensive Midfielder',
    'FW,DF_8': 'Forward',
    'MF,DF_9': 'Defensive Midfielder',
    'DF,FW_10': 'Defender'
}

# Apply the final mapping to the 'Position' column
df['Position'] = df['Position'].map(final_mapping)

# Display the final DataFrame to confirm changes
print(df[['Player', 'Position']].head())

df

# Define constants
DAYS_BETWEEN_MATCHES = 4.5  # Average days between matches

# Calculate games missed
df['Games Missed'] = (38 - df['Matches Played']).astype(int)

# Calculate days missed based on games missed
df['Days Missed'] = (df['Games Missed'] * DAYS_BETWEEN_MATCHES).astype(int)

# Display the updated DataFrame with the new columns
print(df[['Player', 'Matches Played', 'Games Missed', 'Days Missed']].head())

# Reorder 'Height' next to 'Age'
columns = list(df.columns)
columns.remove('Height')
columns.insert(columns.index('Age') + 1, 'Height')

# Reorder 'Games Missed' and 'Days Missed' next to 'Minutes Played'
columns.remove('Games Missed')
columns.remove('Days Missed')
columns.insert(columns.index('Minutes Played') + 1, 'Games Missed')
columns.insert(columns.index('Minutes Played') + 2, 'Days Missed')

# Apply the new column order
df = df[columns]

# Display the updated DataFrame
print(df.head())

df

# Drop columns by index range (26 to 32)
df = df.drop(df.columns[29:35], axis=1)

# Display the updated DataFrame
print(df.head())

df = df.drop(df.columns[19:22], axis=1)

# Display the updated DataFrame
print(df.head())

df = df.drop(df.columns[23:26], axis=1)

# Display the updated DataFrame
print(df.head())

# Drop the specific columns
df = df.drop(columns=['npxG+xAG_90','pxG+xAG','npxG+xAG','PKatt', 'G-PK'], errors='ignore')

# Display the updated DataFrame
print(df.head())

df.info()

# Rename specific columns
df.rename(columns={
    'G+A': 'Goals & Assists',
    'PK': 'Penalties',
    'CrdY': 'Yellow Cards',
    'CrdR': 'Red Cards',
    'PrgC': 'Progressive Carries',
    'PrgP': 'Progressive Passes',
    'PrgR': 'Progressive Runs'
}, inplace=True)

# Convert the renamed columns to integer type
columns_to_convert = [
    'Goals & Assists', 'Penalties', 'Yellow Cards', 'Red Cards',
    'Progressive Carries', 'Progressive Passes', 'Progressive Runs'
]

df[columns_to_convert] = df[columns_to_convert].astype(int)


print(df.head())

df

stats_df = pd.read_excel('player_stats.xlsx', engine='openpyxl')
# Exclude unnecessary columns from stats_df
excluded_columns = ['Name', 'Twitter', 'Instagram', 'Appearances', 'Goals', 'Wins', 'Losses', 'Clean sheets', 'Goals Conceded']
stats_df = stats_df.drop(columns=excluded_columns, errors='ignore')

# Ensure the column name for player matches the one in df
stats_df.rename(columns={'Name': 'Player'}, inplace=True)

# Iterate through the stats_df and update rows in df
for _, row in stats_df.iterrows():
    player_name = row['Player']
    if player_name in df['Player'].values:  # Check if player exists in df
        # Add each column from stats_df to df
        for col in row.index:
            if col != 'Player':  # Avoid overwriting the Player column
                if col not in df.columns:  # Add column if not already present
                    df[col] = None
                df.loc[df['Player'] == player_name, col] = row[col]

df

import numpy as np

# Replace only NaN values with 0
df = df.applymap(lambda x: 0 if isinstance(x, float) and np.isnan(x) else x)

# Confirm the replacement
print("NaN values replaced with 0, None values untouched.")
print(df.head())

df

# Filter rows with NaN or None
rows_with_nan_or_none = df[df.isna().any(axis=1) | df.isin([None]).any(axis=1)]

# Display only the 'Player' column for these rows
players_with_nan_or_none = rows_with_nan_or_none['Player']

# Ensure all players are displayed
print("Players with NaN or None values:")
print(players_with_nan_or_none.to_list())  # Converts to a list for full display

# Manually update Jérémy Doku's stats in the dataset
df.loc[df['Player'] == 'Jeremy Doku', [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed',
    'Saves', 'Penalties Saved', 'Punches', 'High Claims', 'Catches',
    'Sweeper clearances', 'Throw outs', 'Goal Kicks'
]] = [
    39, 0, 0, 22, 9, 2, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 786, 27.10, 5, 61, 0, 0, 0,
    3, 0, 15, 5, 0, 3, 0, 2, 0.10, 0, 0, 55,
    19, 35, 1, 0, 0, 0, 0, 0, 0, 0, 0
]

# Remove the 'Facebook' column from the DataFrame
df = df.drop(columns=['Facebook'], errors='ignore')

# List of columns to convert to integer
columns_to_convert = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Duels won', 'Duels lost', 'Successful 50/50s', 'Aerial battles won',
    'Aerial battles lost', 'Own goals', 'Errors leading to goal', 'Passes',
    'Big Chances Created', 'Crosses', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Penalties scored', 'Freekicks scored', 'Shots', 'Shots on target',
    'Big chances missed', 'Saves', 'Penalties Saved', 'Punches',
    'High Claims', 'Catches', 'Sweeper clearances', 'Throw outs', 'Goal Kicks',
    'Shooting accuracy %', 'Goals per match', 'Passes per match',
    'Cross accuracy %', 'Recoveries'
]

# Clean and convert columns
for col in columns_to_convert:
    if col in df.columns:
        # Remove commas and percentage signs, convert to numeric
        df[col] = df[col].astype(str).str.replace(',', '').str.rstrip('%')
        # Convert to numeric and handle missing values
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)

# Verify the updates
print(df.dtypes)  # Ensure the columns are converted to integers
print(df.head())  # Display the first few rows

# Convert specific columns to integer type
columns_to_convert = ['Hit woodwork', 'Passes', 'Passes per match']

# Manually update Jack Grealish's stats in the dataset
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed',
    'Saves', 'Penalties Saved', 'Punches', 'High Claims', 'Catches',
    'Sweeper clearances', 'Throw outs', 'Goal Kicks'
]

values_to_update = [
    11, 62, 12, 6, 3, 9, 6, 0, 63, 84, 18, 2, 0, 2, 1, 0, 47, 0.75, 4, 20, 0, 0, 6,
    4, 0, 9, 7, 2, 0, 2, 0.15, 0, 6, 22, 12, 0, 0, 8, 0, 0, 8, 0, 0, 6, 0, 0
]

# Ensure lengths match
assert len(columns_to_update) == len(values_to_update), "Mismatch between columns and values"

# Update Jack Grealish's stats
df.loc[df['Player'] == 'Jack Grealish', columns_to_update] = values_to_update

# Verify the updates
print(df.loc[df['Player'] == 'Jack Grealish'])

# Define the player name
player_name = "Joško Gvardiol"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed',
    'Saves', 'Penalties Saved', 'Punches', 'High Claims', 'Catches',
    'Sweeper clearances', 'Throw outs', 'Goal Kicks'
]

# Define the values to update for the player
values_to_update = [
    87, 63, 0, 15, 50, 80, 45, 0, 229, 226, 149, 39, 63, 45, 0, 2, 3169, 64.67, 3,
    49, 14, 4, 70, 4, 0, 30, 4, 3, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]

# Define the player name
player_name = "Mateo Kovačić"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    36, 69, 0, 11, 10, 10, 4, 0, 72, 75, 62, 20, 4, 0, 0, 0, 1523, 50.77, 3,
    4, 0, 4, 20, 4, 0, 17, 0, 0, 1, 0, 0.05, 0, 0, 22, 5, 23, 1
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "John Stones"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    9, 50, 0, 2, 10, 20, 4, 0, 46, 22, 22, 1, 14, 5, 0, 0, 831, 51.94, 0,
    5, 0, 0, 25, 4, 0, 4, 0, 0, 1, 0, 0, 0.0, 0, 0, 1, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]

# Define the player name
player_name = "Kyle Walker"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    38, 63, 0, 18, 27, 35, 18, 0, 152, 102, 81, 21, 26, 15, 0, 0, 2136, 66.75, 7,
    59, 32, 6, 78, 2, 0, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]

# Define the player name
player_name = "Nicolas Jackson"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    21, 51, 4, 7, 7, 26, 0, 1, 12, 11, 21, 7, 16, 8, 10, 0, 678, 18.80, 8,
    4, 0, 6, 25, 4, 2, 28, 7, 3, 3, 0, 3.0, 0, 0, 22, 5, 23, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]

# Define the player name
player_name = "Willy Boly"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    46, 63, 0, 2, 25, 86, 41, 1, 86, 108, 69, 3, 57, 27, 0, 0, 611, 30.55, 1,
    31, 0, 1, 31, 1, 1, 20, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Neco Williams"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    69, 58, 0, 7, 22, 43, 26, 1, 107, 149, 106, 19, 31, 21, 0, 0, 597, 22.96, 1,
    68, 18, 0, 21, 1, 0, 23, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Chris Wood"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    7, 54, 0, 7, 1, 26, 19, 0, 431, 13.9, 0, 0, 0, 0, 0, 0, 0, 0, 14, 3,
    54, 0, 12, 0, 0, 22, 7, 5, 4, 5, 0, 0, 0, 48, 26, 54, 12
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Ben Mee"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    26, 58, 0, 4, 13, 57, 43, 1, 67, 67, 54, 3, 35, 32, 0, 0, 605, 37.81, 1,
    36, 60, 0, 21, 7, 1, 23, 1, 0, 0, 0, 0, 0, 0, 14, 6, 54, 1
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Hwang Hee-chan"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    20, 40, 0, 10, 10, 15, 5, 0, 530, 13.56, 0, 0, 0, 0, 0, 0, 0, 0, 12, 3,
    40, 0, 8, 6, 0, 31, 15, 2, 1, 0, 0, 0, 0, 45, 18, 39, 8
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Philip Billing"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    33, 48, 0, 8, 20, 76, 16, 0, 93, 93, 96, 12, 36, 24, 0, 1, 501, 17.28, 2,
    29, 24, 0, 17, 3, 0, 19, 0, 0, 0, 0, 0, 0.07, 0, 0, 30, 7, 27, 1
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Adam Smith"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    33, 62, 0, 1, 21, 49, 23, 1, 92, 81, 85, 4, 19, 23, 0, 0, 768, 27.43, 2,
    39, 46, 3, 23, 6, 0, 30, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Lewis Cook"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    61, 67, 0, 3, 65, 43, 18, 0, 228, 140, 129, 21, 42, 31, 0, 1, 1343, 40.7, 3,
    132, 26, 2, 51, 5, 1, 39, 2, 0, 0, 0, 0, 0, 0, 12, 4, 33, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Adam Webster"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    14, 86, 0, 3, 16, 41, 21, 0, 63, 50, 38, 0, 33, 13, 1, 1, 1086, 72.4, 1, 1, 0, 1, 35, 2, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Jason Steele"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed', 'Saves',
    'Penalties Saved', 'Punches', 'High Claims', 'Catches', 'Sweeper clearances',
    'Throw outs', 'Goal Kicks'
]

# Define the values to update for the player
values_to_update = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 602, 35.41, 0, 0, 0, 0, 80,
    0, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 43, 0, 8, 7, 1, 17, 59, 64
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Igor"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    25, 72, 0, 2, 14, 45, 30, 1, 1417, 59.04, 1, 0, 0, 0, 0, 0, 2, 0, 0,
    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0.11, 0, 0, 25, 0, 25, 0, 3, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Danny Welbeck"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    17, 45, 0, 10, 12, 9, 3, 2, 1532, 3.45, 0, 15, 12, 3, 0, 0, 506, 17.45, 3,
    3, 0, 3, 3, 4, 0, 12, 9, 1, 1, 1, 0, 0.17, 0, 0, 41, 16, 39, 10
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Lewis Dunk"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    66, 52, 0, 10, 31, 88, 46, 3, 180, 101, 81, 5, 57, 33, 0, 1, 3212, 97.53, 1,
    7, 14, 2, 149, 7, 0, 23, 1, 2, 1, 1, 0, 0.23, 0, 0, 0, 1, 23, 1
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Idrissa Gana Gueye"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    73, 60, 0, 11, 28, 16, 6, 6, 174, 128, 91, 11, 15, 9, 0, 0, 880, 35.20, 3,
    11, 9, 2, 22, 8, 0, 35, 0, 0, 3, 1, 0, 0.16, 0, 1, 26, 7, 27, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Jack Harrison"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    37, 59, 0, 13, 12, 21, 7, 1, 129, 106, 151, 29, 12, 19, 0, 0, 534, 18.41, 5,
    81, 17, 4, 14, 1, 0, 20, 1, 0, 0, 0, 0, 0.10, 0, 0, 34, 7, 26, 3
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Dominic Calvert-Lewin"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    4, 60, 1, 2, 4, 38, 30, 1, 434, 31.56, 4, 16, 10, 0, 0, 0, 7, 2, 2,
    24, 16, 0, 0, 0, 0, 0, 7, 57, 10, 0.22, 3, 1, 0, 73, 31, 42, 1
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Ashley Young"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    53, 72, 0, 6, 22, 45, 24, 1, 120, 108, 114, 12, 19, 32, 1, 3, 775, 25.00, 2,
    48, 24, 2, 48, 5, 1, 33, 1, 0, 0, 0, 0, 0.11, 0, 0, 15, 8, 33, 3
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Jeffrey Schlupp"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    38, 63, 0, 4, 8, 12, 4, 0, 54, 92, 93, 17, 22, 17, 0, 0, 323, 11.14, 2,
    10, 20, 0, 6, 1, 0, 24, 0, 0, 0, 0, 0, 0.07, 0, 0, 19, 11, 58, 1
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Harry Wilson"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    21, 67, 0, 11, 10, 11, 5, 0, 78, 81, 72, 15, 6, 6, 0, 0, 582, 16.63, 5,
    42, 29, 3, 29, 6, 0, 21, 5, 0, 0, 0, 2, 0.11, 0, 0, 40, 13, 33, 2
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Alex Iwobi"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    31, 0, 0, 18, 15, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1012, 31.63, 5,
    70, 0, 0, 0, 2, 0, 12, 8, 0, 0, 0, 1, 0.16, 0, 0, 55, 20, 36, 2
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Vitaliy Mykolenko"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    69, 55, 0, 11, 36, 82, 37, 1, 142, 126, 97, 18, 30, 27, 0, 0, 882, 31.50, 2,
    56, 23, 2, 54, 1, 0, 23, 1, 1, 1, 0, 2, 0.03, 0, 0, 13, 3, 23, 2
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Abdoulaye Doucouré"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    43, 63, 0, 9, 15, 18, 5, 0, 144, 100, 183, 25, 25, 24, 0, 0, 866, 27.06, 4,
    26, 12, 1, 17, 7, 0, 53, 21, 1, 5, 0, 1, 0.22, 0, 0, 47, 23, 49, 10
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Jordan Pickford"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1429, 37.41, 0,
    400, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0.00, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Jordan Pickford"

# Define the columns to update (goalkeeping stats only)
goalkeeping_columns = [
    'Saves', 'Penalties Saved', 'Punches', 'High Claims',
    'Catches', 'Sweeper clearances', 'Throw outs', 'Goal Kicks'
]

# Define the corresponding values from the screenshot
goalkeeping_values = [
    121, 0, 15, 6,  # Saves, Penalties Saved, Punches, High Claims
    6, 26, 141, 273  # Catches, Sweeper Clearances, Throw Outs, Goal Kicks
]

# Update the dataset
df.loc[df['Player'] == player_name, goalkeeping_columns] = goalkeeping_values

# Verify the updates
print(df.loc[df['Player'] == player_name])

# Define the player name
player_name = "Saša Lukić"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    33, 58, 0, 5, 16, 9, 0, 0, 65, 58, 69, 5, 11, 8, 0, 0, 489, 20.38, 4,
    4, 0, 4, 11, 3, 0, 27, 0, 0, 0, 0, 0, 0.04, 0, 0, 13, 3, 23, 2
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Tom Cairney"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    24, 67, 0, 3, 13, 6, 1, 0, 105, 87, 61, 26, 14, 6, 0, 0, 1241, 36.5, 5,
    25, 20, 2, 41, 3, 0, 16, 0, 0, 0, 0, 1, 0.03, 0, 0, 17, 8, 47, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Will Hughes"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    60, 55.0, 0, 2, 22, 121, 5, 0, 111, 109, 111, 9, 18, 12, 0, 0, 845, 28.17,
    2, 30, 33.0, 2, 10, 6, 0, 39, 1, 0, 0, 0, 0.0, 0, 0, 3, 0, 10.0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Joel Ward"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    71, 62.0, 0, 3, 14, 104, 51, 0, 94, 104, 94, 8, 45, 49, 1, 0, 800, 30.77,
    1, 38, 14.0, 1, 38, 6, 0, 22, 0, 0, 0, 0, 0.0, 0, 0, 3, 0, 10.0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Chris Richards"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    46, 35.46, 1, 2, 27, 106, 62, 0, 88, 114, 70, 12, 60, 44, 0, 0, 922, 35.46,
    1, 34, 0.0, 1, 34, 3, 0, 12, 1, 1, 0, 0, 0.03, 0, 0, 17, 3, 18.0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Edson Álvarez"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    80, 49.0, 0, 8, 42, 70, 36, 0, 144, 152, 146, 27, 30, 36, 0, 0, 1195, 38.55,
    2, 60, 25.0, 2, 60, 11, 0, 33, 1, 1, 0, 1, 0.03, 0, 0, 17, 3, 18.0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Tomáš Souček"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    53, 66.04, 0, 8, 107, 151, 60, 0, 161, 189, 141, 108, 108, 81, 0, 0,
    947, 25.59, 4, 31, 33.0, 2, 41, 7, 0, 41, 10, 10, 0, 1, 0.19, 0, 0, 43, 15,
    35.14, 11
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Emerson Palmieri"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    36, 39.83, 0, 5, 43, 88, 45, 2, 142, 188, 117, 24, 25, 23, 1, 0, 1454, 39.83,
    2, 49, 20.0, 2, 42, 10, 0, 32, 1, 1, 0, 1, 0.14, 0, 0, 30, 5, 33.33, 7
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Ezri Konsa"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    27, 62.79, 1, 9, 37, 119, 62, 0, 95, 142, 92, 16, 28, 15, 0, 0, 1,375, 50.13, 5,
    15, 30, 13, 19, 5, 2, 38, 0, 0, 0, 0, 0.0, 0, 0, 12, 5, 33.33, 9
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Luke Shaw"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    13, 72, 0, 0, 13, 37, 19, 1, 59, 104, 94, 7, 13, 10, 0, 0, 1026, 45.92, 0, 0, 0, 0, 16,
    6, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Jonny Evans"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    22, 64, 0, 0, 23, 74, 32, 1, 70, 75, 49, 4, 36, 18, 0, 0, 826, 35.91, 0, 0, 0, 0, 17,
    0, 0, 17, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "André Onana"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1373, 36.13, 0, 0, 0, 0, 206,
    5, 0, 1, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "André Onana"

# Define the columns to update (goalkeeping stats only)
goalkeeping_columns = [
    'Saves', 'Penalties Saved', 'Punches', 'High Claims',
    'Catches', 'Sweeper clearances', 'Throw outs', 'Goal Kicks'
]

# Define the corresponding values based on the screenshot (or set 0 for missing values)
goalkeeping_values = [
    83, 8, 10, 11,
    11, 140, 11, 116  # Correctly close the list with a bracket
]

# Update the dataset
df.loc[df['Player'] == player_name, goalkeeping_columns] = goalkeeping_values

# Verify the updates
print(df.loc[df['Player'] == player_name, ['Player'] + goalkeeping_columns])

# Define the player name
player_name = "Anthony Gordon"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    12, 85, 0, 2, 5, 10, 3, 0, 15, 20, 12, 5, 2, 1, 0, 0, 450, 25.5, 8, 12, 30, 5, 8,
    3, 0, 15, 2, 5, 3, 0, 0.25, 1, 0, 20, 12, 60, 3, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Dan Burn"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    25, 70, 1, 5, 10, 25, 12, 1, 45, 50, 25, 15, 10, 5, 0, 1, 800, 30.0, 5, 15, 40, 10, 12,
    2, 0, 20, 5, 3, 2, 1, 0.2, 0, 0, 30, 15, 50, 8, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Kieran Trippier"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    30, 75, 2, 8, 20, 40, 15, 2, 60, 70, 30, 20, 10, 7, 0, 2, 1200, 40.0, 12, 30, 50, 15, 20,
    5, 0, 25, 8, 4, 3, 1, 0.3, 2, 1, 35, 20, 57, 10, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Nick Pope"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 300, 15.0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 60, 5, 10, 8, 15, 12, 10, 25
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Nick Pope"

# Define the columns to update (goalkeeping stats only)
goalkeeping_columns = [
    'Saves', 'Penalties Saved', 'Punches', 'High Claims',
    'Catches', 'Sweeper clearances', 'Throw outs', 'Goal Kicks'
]

# Define the corresponding values based on Nick Pope's stats
goalkeeping_values = [
    60, 5, 10, 8,
    15, 12, 10, 25  # Ensure values match Nick Pope's stats
]

# Update the dataset
df.loc[df['Player'] == player_name, goalkeeping_columns] = goalkeeping_values

# Verify the updates
print(df.loc[df['Player'] == player_name, ['Player'] + goalkeeping_columns])

# Define the player name
player_name = "Jacob Murphy"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    15, 67, 0, 3, 7, 12, 5, 0, 25, 30, 15, 10, 5, 2, 0, 0, 600, 22.5, 3, 10, 20, 5, 8,
    2, 0, 10, 3, 5, 2, 1, 0.15, 1, 0, 15, 10, 66, 3, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Kyle Walker"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    38, 63, 0, 18, 27, 35, 18, 0, 152, 102, 81, 21, 26, 15, 0, 0, 2136, 66.75, 7,
    59, 32, 6, 78, 2, 0, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]

# Define the player name
player_name = "Mateo Kovačić"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    36, 69, 0, 11, 10, 10, 4, 0, 72, 75, 62, 20, 4, 0, 0, 0, 1523, 50.77, 3,
    4, 0, 4, 20, 4, 0, 17, 0, 0, 1, 0, 0.05, 0, 0, 22, 5, 23, 1
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]

# Define the player name
player_name = "John Stones"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    9, 50, 0, 2, 10, 20, 4, 0, 46, 22, 22, 1, 14, 5, 0, 0, 831, 51.94, 0,
    5, 0, 0, 25, 4, 0, 4, 0, 0, 1, 0, 0, 0.0, 0, 0, 1, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]

# Define the player name
player_name = "Andrew Robertson"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    35, 69, 0, 34, 27, 18, 5, 0, 101, 121, 68, 1, 25, 10, 0, 0, 1244, 50.77, 6,
    48, 0, 2, 50, 3, 0, 30, 7, 3, 8, 0, 3.0, 0, 0, 22, 5, 23, 1
]

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Nicolas Jackson"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    21, 51, 4, 7, 7, 26, 0, 1, 12, 11, 21, 7, 16, 8, 10, 0, 678, 18.80, 8,
    4, 0, 6, 25, 4, 2, 28, 7, 3, 3, 0, 3.0, 0, 0, 22, 5, 23, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Define the player name
player_name = "Emerson"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    18, 66, 0, 4, 12, 20, 8, 1, 38, 28, 15, 10, 7, 5, 0, 0, 950, 28.0, 8, 20, 40, 15, 20,
    4, 0, 12, 3, 6, 4, 1, 0.2, 2, 0, 20, 10, 55, 8, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Ben Davies"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    25, 60, 1, 5, 18, 30, 10, 1, 45, 35, 20, 15, 12, 10, 0, 1, 1000, 32.0, 4, 15, 25, 10, 15,
    5, 1, 20, 5, 8, 6, 2, 0.22, 2, 1, 25, 15, 60, 10, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Brennan Johnson"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    8, 50, 0, 1, 6, 5, 2, 0, 20, 15, 8, 5, 3, 2, 0, 0, 800, 25.0, 6, 10, 18, 5, 8,
    3, 0, 12, 3, 6, 4, 1, 0.2, 2, 0, 18, 10, 56, 5, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "James Maddison"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    12, 68, 0, 1, 10, 8, 3, 0, 35, 22, 12, 7, 6, 3, 0, 0, 1050, 40.0, 20, 35, 60, 15, 25,
    4, 0, 5, 4, 10, 5, 2, 0.25, 2, 1, 40, 20, 50, 12, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Pape Matar Sarr"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    28, 80, 2, 4, 14, 22, 10, 0, 42, 30, 18, 12, 8, 6, 0, 1, 820, 35.0, 4, 12, 18, 6, 7,
    2, 0, 15, 2, 5, 2, 1, 0.18, 1, 0, 18, 8, 50, 5, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Valentino Livramento"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    20, 75, 1, 3, 10, 15, 5, 0, 35, 25, 15, 10, 12, 5, 0, 0, 750, 28.0, 5, 10, 20, 7, 8,
    2, 0, 5, 1, 3, 1, 0, 0.15, 1, 0, 12, 7, 58, 3, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Jamaal Lascelles"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    30, 70, 2, 4, 12, 20, 15, 1, 50, 40, 20, 15, 25, 10, 0, 1, 900, 25.0, 3, 8, 15, 5, 10,
    3, 0, 10, 2, 4, 3, 0, 0.2, 0, 0, 10, 5, 50, 2, 0, 0, 0, 0, 0, 0, 0
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Alisson"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed', 'Saves',
    'Penalties Saved', 'Punches', 'High Claims', 'Catches', 'Sweeper clearances',
    'Throw outs', 'Goal Kicks'
]

# Define the values to update for the player
values_to_update = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 997, 35.61, 0, 0, 0, 0, 83,
    1, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 0, 83, 0, 10, 11, 1, 11, 140, 116
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Đorđe Petrović"

# Define the columns to update
columns_to_update = [
    'Tackles', 'Tackle success %', 'Last man tackles', 'Blocked shots',
    'Interceptions', 'Clearances', 'Headed Clearance', 'Clearances off line',
    'Recoveries', 'Duels won', 'Duels lost', 'Successful 50/50s',
    'Aerial battles won', 'Aerial battles lost', 'Own goals',
    'Errors leading to goal', 'Passes', 'Passes per match', 'Big Chances Created',
    'Crosses', 'Cross accuracy %', 'Through balls', 'Accurate long balls',
    'Yellow cards', 'Red cards', 'Fouls', 'Offsides', 'Headed goals',
    'Goals with right foot', 'Goals with left foot', 'Hit woodwork',
    'Goals per match', 'Penalties scored', 'Freekicks scored', 'Shots',
    'Shots on target', 'Shooting accuracy %', 'Big chances missed'
]

# Define the values to update for the player
values_to_update = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 707, 30.74, 0, 0, 0, 0, 93,
    2, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, 75, 0, 8, 18, 2, 14, 97, 149
]

# Update the player's stats in the dataset
for stat, value in zip(columns_to_update, values_to_update):
    if stat in df.columns:
        df.loc[df['Player'] == player_name, stat] = value
    else:
        # If the column does not exist, create it with default value 0 and update it
        df[stat] = 0
        df.loc[df['Player'] == player_name, stat] = value

# Verify the updates
updated_player_data = df[df['Player'] == player_name]
updated_player_data

# Define the player name
player_name = "Đorđe Petrović"

# Define the columns to update (goalkeeping stats only)
goalkeeping_columns = [
    'Saves', 'Penalties Saved', 'Punches', 'High Claims',
    'Catches', 'Sweeper clearances', 'Throw outs', 'Goal Kicks'
]

# Define the corresponding values based on Đorđe Petrović's stats
goalkeeping_values = [
    75, 0, 8, 18,
    2, 14, 97, 149  # Ensure values match Đorđe Petrović's stats
]

# Update the dataset
df.loc[df['Player'] == player_name, goalkeeping_columns] = goalkeeping_values

# Verify the updates
print(df.loc[df['Player'] == player_name, ['Player'] + goalkeeping_columns])

# Save DataFrame to CSV
df.to_csv("updated_dataset.csv", index=False)

# Enable download link
from google.colab import files
files.download("updated_dataset.csv")

# List of players to remove
players_to_remove = [
    'Son Heung-min','Andrew Robertson','Scott McTominay', 'James Ward-Prowse', 'Sam Johnstone',
    'Bobby Reid', 'James Milner', 'Dominic Solanke', 'Max Kilman',
    'Mathias Jørgensen', 'Moussa Niakhate', 'Serge Aurier', 'Jordan Clark',
    'Andros Townsend', 'Charlie Taylor', 'Jóhann Berg Guðmundsson',
    'Ameen Al-Dakhil', 'Jack Robinson', 'Anel Ahmedhodžić',
    'James Mcatee', 'Andre Brooks', 'Luke Thomas'
]

# Remove the players from the dataset
df = df[~df['Player'].isin(players_to_remove)]

# Verify the dataset
print("Players removed. Updated dataset size:")
print(df.shape)

df

plt.figure(figsize=(8, 5))
sns.countplot(y=df["Position"], order=df["Position"].value_counts().index, palette="viridis")
plt.title("Distribution of Player Positions")
plt.xlabel("Count")
plt.ylabel("Position")
plt.show()

print(df.nlargest(10, "Goals")[["Player", "Team", "Goals", "Assists"]])  # Top 10 goal scorers

team_performance = df.groupby("Team")[["Minutes Played", "Games Missed", "Goals", "Assists"]].mean()
print(team_performance)

plt.figure(figsize=(12, 6))
team_avg_minutes = df.groupby("Team")["Minutes Played"].mean().sort_values(ascending=False).head(10)  # Top 10 teams
team_avg_minutes.plot(kind="bar", color="purple", figsize=(12, 6))
plt.title("Top 10 Teams - Average Minutes Played Per Player")
plt.xlabel("Team")
plt.ylabel("Average Minutes Played")
plt.xticks(rotation=45)
plt.show()

# Select numerical columns for correlation analysis
numerical_features = ["Minutes Played", "Games Missed", "Goals", "Assists", "Tackles", "Shots", "Saves"]

# Compute correlation matrix
correlation_matrix = df[numerical_features].corr()

# Plot correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Matrix of Player Statistics")
plt.show()

# Scatter plot for Minutes Played vs Goals
plt.figure(figsize=(6,4))
sns.scatterplot(data=df, x="Minutes Played", y="Goals", hue="Position")
plt.title("Minutes Played vs Goals Scored")
plt.show()

# Step 1: Compute Performance Score based on position
df["Performance"] = 0  # Initialize performance column

# Forwards (Only Forwards)
df.loc[df["Position"].str.contains("Forward", na=False), "Performance"] = (
    df["Goals"] * 4 + df["Assists"] * 3 + df["Shots on target"] * 2
)

# Midfielders (Only Midfielders)
df.loc[(df["Position"].str.contains("Midfielder", na=False)) &
       (~df["Position"].str.contains("Defensive Midfielder", na=False)), "Performance"] = (
    df["Passes"] * 3 + df["Assists"] * 2 + df["Progressive Passes"] * 3
)

# Defensive Midfielders (Passes, Tackles, Interceptions)
df.loc[df["Position"].str.contains("Defensive Midfielder", na=False), "Performance"] = (
    df["Passes"] * 2 + df["Tackles"] * 3 + df["Interceptions"] * 3
)

# Defenders (Tackles, Interceptions, Clearances)
df.loc[df["Position"].str.contains("Defender", na=False), "Performance"] = (
    df["Tackles"] * 2 + df["Interceptions"] * 3 + df["Clearances"] * 1
)

# Step 2: Rank Players Within Their Position
df["Performance"] = pd.to_numeric(df["Performance"], errors="coerce")
df["Rank in Position"] = df.groupby("Position")["Performance"].rank(method="dense", ascending=False).astype(int)

# Step 3: Assign performance labels based on rank percentiles
# Get number of players per position
position_counts = df["Position"].value_counts().to_dict()

# Define classification function
def classify_by_percentile(row):
    total = position_counts[row["Position"]]
    rank = row["Rank in Position"]
    if rank <= total * 0.3:
        return "Good"
    elif rank <= total * 0.7:
        return "Average"
    else:
        return "Bad"

# Apply label based on dynamic cutoffs
df["Performance"] = df.apply(classify_by_percentile, axis=1)

columns_to_remove = ["Position-Based Performance Score", "General Position"]
df = df.drop(columns=[col for col in columns_to_remove if col in df.columns], errors="ignore")

from IPython.display import display
display(df)

df["Position"].value_counts()

import string
import pandas as pd

# --- Backup original names ---
df['Original_Player'] = df['Player']
df['Original_Team'] = df['Team']

# --- Anonymize Player names ---
player_labels = [f"Player {i+1}" for i in range(len(df))]
player_map = dict(zip(df['Original_Player'], player_labels))  # Create player mapping
df['Player'] = df['Original_Player'].map(player_map)

# --- Anonymize Team names ---
unique_teams = df['Original_Team'].unique()
team_map = {team: f"Team {chr(65 + i)}" for i, team in enumerate(unique_teams)}  # A, B, C...
df['Team'] = df['Original_Team'].map(team_map)

# --- Preview ---
print(df[['Original_Player', 'Player', 'Original_Team', 'Team']].head())

# Grouping by team and aggregating relevant statistics
team_aggregates = df.groupby('Team').agg({
    'Minutes Played': 'sum',       # Total minutes played by the team
    'Games Missed': 'sum',         # Total games missed by players in the team
    'Days Missed': 'sum',          # Total days missed by players in the team
    'Shooting accuracy %': 'mean', # Average shooting accuracy for the team
    'Big chances missed': 'sum',   # Total big chances missed
    'Saves': 'sum',                # Total saves
    'Penalties Saved': 'sum',      # Total penalties saved
    'High Claims': 'sum',          # Total high claims by goalkeepers
    'Sweeper clearances': 'sum',   # Total sweeper clearances
    'Throw outs': 'sum',           # Total throw outs
    'Goal Kicks': 'sum',           # Total goal kicks
    'Duels won': 'sum',            # Total duels won by the team
    'Duels lost': 'sum',           # Total duels lost by the team
    'Passes': 'sum'                # Total passes made by the team
}).reset_index()

# Renaming columns for clarity
team_aggregates.columns = [
    'Team',
    'Total Minutes Played',
    'Total Games Missed',
    'Total Days Missed',
    'Average Shooting Accuracy %',
    'Total Big Chances Missed',
    'Total Saves',
    'Total Penalties Saved',
    'Total High Claims',
    'Total Sweeper Clearances',
    'Total Throw Outs',
    'Total Goal Kicks',
    'Total Duels Won',
    'Total Duels Lost',
    'Total Passes'
]

team_aggregates

team_aggregates.to_csv("team_aggregates.csv", index=False)
files.download("team_aggregates.csv")

# Create a new dataset with only Forwards
df_forwards = df[df["Position"].str.contains("Forward", na=False)]

# Display the new forwards-only dataset
from IPython.display import display
display(df_forwards)

cols_to_drop = [
    'Goals','Headed goals','Assists', 'Shots on target', 'Goals with left foot' ,'Goals with right foot','Goals & Assists', 'Rank in Position',
    'Saves', 'Penalties Saved', 'Punches', 'High Claims', 'Catches',
    'Sweeper clearances', 'Throw outs', 'Goal Kicks'
]
df_forwards = df_forwards.drop(columns=[col for col in cols_to_drop if col in df_forwards.columns])

# Step 4: Encode performance label (Bad=0, Average=1, Good=2)
df_forwards['Performance_Encoded'] = df_forwards['Performance'].map({'Bad': 0, 'Average': 1, 'Good': 2})

df_forwards

# Step 4: Encode performance label (Bad=0, Average=1, Good=2)
performance_map = {'Bad': 0, 'Average': 1, 'Good': 2}
df_forwards['Performance_Encoded'] = df_forwards['Performance'].map(performance_map)

# Step 5: Sort by performance and get top 20
top20 = df_forwards.sort_values(by='Performance_Encoded', ascending=False).head(20)

# Step 6: Plot the top 20
plt.figure(figsize=(12, 8))
plt.barh(top20['Player'], top20['Performance_Encoded'], color='mediumseagreen')
plt.xlabel("Performance Encoded  (0 = Bad, 1 = Average, 2 = Good)")
plt.title("Top 20 Forwards by Subjective Performance Label")
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

# Step 7: Display top 20 players
top20_display = top20[['Player', 'Team', 'Performance']]
print(top20_display)

# Keep only numeric features
numeric_df = df_forwards.select_dtypes(include=['int64', 'float64'])

# Correlation with Performance
correlation_with_target = numeric_df.corr()['Performance_Encoded'].sort_values(ascending=False)

# Get Top 10 Positive & Negative Correlated Features
top_positive = correlation_with_target[1:11]
top_negative = correlation_with_target[-10:]

# Step 8: Plot top positive correlations
plt.figure(figsize=(10, 6))
sns.barplot(x=top_positive.values, y=top_positive.index)
plt.title("Top 10 Features Positively Correlated with Performance")
plt.xlabel("Correlation with Performance")
plt.tight_layout()
plt.show()

# Step 9: Plot top negative correlations
plt.figure(figsize=(10, 6))
sns.barplot(x=top_negative.values, y=top_negative.index)
plt.title("Top 10 Features Negatively Correlated with Performance")
plt.xlabel("Correlation with Performance")
plt.tight_layout()
plt.show()

# Step 10 (Optional): Print all correlations
print(correlation_with_target)

from sklearn.feature_selection import f_classif
import pandas as pd

# Step 1: Use only numeric features (excluding the target column)
X = df_forwards.select_dtypes(include=['int64', 'float64']).drop(columns=['Performance_Encoded'])

# Step 2: Target variable
y = df_forwards['Performance_Encoded']

# Step 3: Apply ANOVA F-test
f_scores, p_values = f_classif(X, y)

# Step 4: Organize and display results
anova_results = pd.DataFrame({
    'Feature': X.columns,
    'F-Score': f_scores,
    'p-Value': p_values
}).sort_values(by='F-Score', ascending=False)

print(anova_results)

import matplotlib.pyplot as plt

# Plot Top 10
top_anova = anova_results.head(10)

plt.figure(figsize=(10, 6))
plt.barh(top_anova['Feature'], top_anova['F-Score'], color='mediumseagreen')
plt.xlabel("F-Score (ANOVA)")
plt.title("Top 10 Statistically Significant Features (ANOVA)")
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

from sklearn.feature_selection import mutual_info_classif
import pandas as pd

# Features and target
X = df_forwards.select_dtypes(include=['int64', 'float64']).drop(columns=['Performance_Encoded'])
y = df_forwards['Performance_Encoded']

# Calculate mutual information
mi_scores = mutual_info_classif(X, y, random_state=42)

# Organize and sort
mi_df = pd.DataFrame({
    'Feature': X.columns,
    'Mutual Information': mi_scores
}).sort_values(by='Mutual Information', ascending=False)

print(mi_df)

from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

# Encode the performance label
df_forwards['Performance_Encoded'] = df_forwards['Performance'].map({'Bad': 0, 'Average': 1, 'Good': 2})

# Select features (exclude Performance + Position + any dropped columns)
X = df_forwards.select_dtypes(include=['int64', 'float64']).drop(columns=['Performance_Encoded'])
y = df_forwards['Performance_Encoded']

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X, y)

import numpy as np
import matplotlib.pyplot as plt

# Get importance scores
importances = model.feature_importances_
feature_names = X.columns
sorted_idx = np.argsort(importances)[::-1]  # Descending

# Plot top 15
plt.figure(figsize=(10, 6))
plt.barh(feature_names[sorted_idx][:15], importances[sorted_idx][:15])
plt.xlabel("Feature Importance Score")
plt.title("Top 15 Most Important Features")
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

# Optional: print table
for name, score in zip(feature_names[sorted_idx], importances[sorted_idx]):
    print(f"{name}: {score:.4f}")

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import StratifiedKFold, cross_val_score
from sklearn.preprocessing import StandardScaler

# STEP 1: Select top features from MI or Random Forest
top_features = [
    'Shots','Minutes Played',
    'Big chances missed','Matches Played', 'Shooting accuracy %',
    'Freekicks scored', 'Days Missed'
]

X = df_forwards[top_features]
y = df_forwards['Performance_Encoded']

# STEP 2: Scale features (important for KNN)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# STEP 3: Define models
models = {
    'Random Forest': RandomForestClassifier(random_state=42),
    'K-Nearest Neighbors': KNeighborsClassifier()
}

# STEP 4: Stratified K-Fold
skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

# STEP 5: Cross-validation and print results
print("🔍 Model Comparison (5-Fold Cross-Validation Accuracy):\n")
for name, model in models.items():
    scores = cross_val_score(model, X_scaled, y, cv=skf, scoring='accuracy')
    print(f"{name}:")
    print(f"  Accuracy per fold: {scores}")
    print(f"  Mean Accuracy: {scores.mean():.4f}\n")

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold, cross_val_predict
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: Use the same scaled features and target
X_final = X_scaled
y_final = y

# Step 2: Reuse the model
model = RandomForestClassifier(random_state=42)

# Step 3: Predict using cross-validation
y_pred = cross_val_predict(model, X_final, y_final, cv=skf)

# Step 4: Classification Report
print("🔍 Classification Report:")
print(classification_report(y_final, y_pred, target_names=['Bad', 'Average', 'Good']))

# Step 5: Confusion Matrix
conf_matrix = confusion_matrix(y_final, y_pred)

# Step 6: Plot Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d',
            xticklabels=['Bad', 'Average', 'Good'],
            yticklabels=['Bad', 'Average', 'Good'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.tight_layout()
plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# STEP 1: Final input features & target
X_final = X_scaled  # Already scaled earlier
y_final = y         # Performance_Encoded

# STEP 2: Predict using 5-fold CV (no .fit() here!)
rf_model = RandomForestClassifier(random_state=42)
y_pred = cross_val_predict(rf_model, X_final, y_final, cv=5)

# STEP 3: Accuracy Score
print("✅ Overall Accuracy:", accuracy_score(y_final, y_pred))

# STEP 4: Classification Report
print("\n📊 Classification Report:")
print(classification_report(y_final, y_pred, target_names=['Bad', 'Average', 'Good']))

# STEP 5: Confusion Matrix
conf_matrix = confusion_matrix(y_final, y_pred)

# STEP 6: Confusion Matrix Heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, cmap="Greens", fmt='d',
            xticklabels=['Bad', 'Average', 'Good'],
            yticklabels=['Bad', 'Average', 'Good'])
plt.title("Confusion Matrix (Random Forest)")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
plt.show()

from sklearn.ensemble import RandomForestClassifier

# STEP 1: Use the best features and target
X_train = X_scaled   # already scaled earlier
y_train = y

# STEP 2: Train the final model
final_model = RandomForestClassifier(random_state=42)
final_model.fit(X_train, y_train)

print("✅ Final Random Forest model trained successfully!")

print(X.columns)

import numpy as np

# Step 1: Create new player input (Joshua Zirkzee example)
new_player_data = np.array([
    28,   # Shots
    1394, # Minutes Played
    7,    # Big Chances Missed
    32,   # Matches Played
    39,   # Shooting Accuracy %
    0,    # Freekicks Scored
    15    # Days Missed
]).reshape(1, -1)

player_name = "Joshua Zirkzee"

# Step 2: Scale input
new_player_scaled = scaler.transform(new_player_data)

# Step 3: Predict
predicted_class = final_model.predict(new_player_scaled)[0]

# Step 4: Map prediction back to label
label_map = {0: 'Bad', 1: 'Average', 2: 'Good'}
predicted_label = label_map[predicted_class]

# Step 5: Print result with player name
print(f"Player: {player_name} --> Predicted Performance: {predicted_label}")

# Re-add "Rank in Position" from original df to df_forwards
df_forwards['Rank in Position'] = df.loc[df_forwards.index, 'Rank in Position']

df_forwards.to_csv("df_forwards.csv", index=False)

import joblib

# Save model
joblib.dump(final_model, 'model_rf.pkl')

joblib.dump(scaler, 'scaler.pkl')